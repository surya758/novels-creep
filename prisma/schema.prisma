// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  kindeId   String     @unique
  name      String
  email     String     @unique
  image     String?
  bookmark  Novel[]
  comments  Comment[]
  reviews   Review[]
  Reaction  Reaction[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Novel {
  id           String    @id @default(cuid())
  title        String
  description  String
  slug         String    @unique
  tags         String[]
  comments     Comment[]
  reviews      Review[]
  chapters     Chapter[]
  bookmarkedBy User[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index(slug)
}

model Chapter {
  id        String    @id @default(cuid())
  title     String
  content   String
  slug      String    @unique
  novel     Novel     @relation(fields: [novelId], references: [id])
  novelId   String
  comment   Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index(slug)
}

model Comment {
  id        String     @id @default(cuid())
  content   String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  novel     Novel      @relation(fields: [novelId], references: [id])
  novelId   String
  reactions Reaction[]
  chapter   Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId String?
}

model Review {
  id      String @id @default(cuid())
  content String
  rating  Int
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  novel   Novel  @relation(fields: [novelId], references: [id])
  novelId String
}

model Reaction {
  id        String  @id @default(cuid())
  type      String // e.g., "like", "love", "laugh"
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
}
