// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  reviews       Review[]
  Reaction      Reaction[]
}

model Book {
  id       String       @id @default(cuid())
  title    String
  content  String
  comments Comment[]
  reviews  Review[]
}

model Comment {
  id        String     @id @default(cuid())
  content   String
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  book      Book       @relation(fields: [bookId], references: [id])
  bookId    String
  reactions Reaction[]
}

model Review {
  id      String @id @default(cuid())
  content String
  rating  Int
  user    User   @relation(fields: [userId], references: [id])
  userId  String
  book    Book   @relation(fields: [bookId], references: [id])
  bookId  String
}

model Reaction {
  id        String  @id @default(cuid())
  type      String // e.g., "like", "love", "laugh"
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String
}
